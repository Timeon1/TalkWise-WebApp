---
import type { GetStaticPaths } from "astro";
import Layout from "@layouts/Layout.astro";
import WordCard from "@components/WordCard.astro";
import { getCollection } from "astro:content";

// import { getLangFromUrl, useTranslations } from "@i18n/utils";

// const lang = getLangFromUrl(Astro.url);
// const t = useTranslations(lang);

export const getStaticPaths = (async () => {
  const blogEntries = await getCollection("list");

  return blogEntries.map((page) => {
    const [lang, ...slug] = page.id.split('/');
    return  {
    params: { title: page.id, type: page.id, lang, desc: page.data.desc , slug: slug.join('/') || undefined },
    props: { jsonData: page.data },
  }});
}) satisfies GetStaticPaths;

const { jsonData } = Astro.props;

// const { desc } = Astro.params

---

<Layout title={`${jsonData.title}`} desc={`${jsonData.desc}`} keywords={`${jsonData.title.includes('hsk') ? 'Chinese Tests':'Chengyu 成語 成语 chengyu four-character idioms'}`}>
  <main class="max-w-screen-xl">
    <div class="px-5 py-16 md:px-10 md:py-24 lg:py-25">
      <h1 class="text-[2rem] font-bold md:text-[4rem] text-center mb-10">
        {jsonData.title}
      </h1>
      <p class="text-center md:text-xl text-gray-500">
        {jsonData.desc}
      </p>
    </div>

    <div class={`grid grid-cols-3   ${jsonData.title == 'xiehouyu' ? 'md:grid-cols-4 sm:grid-auto-cols-3' :'md:grid-cols-7 sm:grid-auto-cols-6'}`}>
      {
        jsonData.data.map((item) => (
          <WordCard title={item} href={`/words/${item}`} />
        ))
      }
    </div>
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
